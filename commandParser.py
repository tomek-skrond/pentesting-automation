from executeCommand import executeCommand

DEFAULT_PATH = "/home/kali/Desktop/automation_results/"

def parse_nmap(flags,date):
    print("flags: ",flags)

    if "command" in flags:
        
        folder=f"{DEFAULT_PATH}{date}/nmap_results.xml".replace("\n","")
        output = executeCommand(flags['command']+ f" -oX " + folder)

        #make report
        executeCommand(f"xsltproc {folder}" + " > " + f"{DEFAULT_PATH}{date}/nmap_results.html".replace("\n",""))


        print(output)

        print("--------------------------------------------------------")
        print("WORKFLOW ENDED SUCCESSFULLY")
        print(f"WORKFLOW OUTPUT FILE SAVED (location: {folder})".replace(".xml",".html"))
        print("--------------------------------------------------------")

        #remove nmap xml
        executeCommand(f"rm {folder}")

def parse_metasploit(flags,date):
    if "config" in flags:

        folder=f"{DEFAULT_PATH}{date}/msf_results.txt".replace("\n","")
        output = executeCommand(f"msfconsole -r {flags['config']}" + f" > " + folder)
        
        print("--------------------------------------------------------")
        print("WORKFLOW ENDED SUCCESSFULLY")
        print(f"WORKFLOW OUTPUT FILE SAVED (location: {folder})".replace(".xml",".html"))
        print("--------------------------------------------------------")


def parse_commands(cmd_dict):
    flags = cmd_dict["tasks"].values()
    
    date = executeCommand('date +"%Y%m%d_%H%M%S"')
    executeCommand(f"mkdir -p {DEFAULT_PATH}{date}/")

    for t in cmd_dict["tasks"].keys():
        print("RUNNING TASK:",t)

        if "nmap" in t:
            nmap_tasks = cmd_dict["tasks"]["nmap"]
            parse_nmap(nmap_tasks,date)
        if "metasploit" in t :
            msf_tasks = cmd_dict["tasks"]["metasploit"]
            parse_metasploit(msf_tasks,date)
            

        
#######################DEPRECATED################################
def append_task(table,task):
    print(f"Task discovered: {task}")
    table.append(task)

    return table

def check_for_tasks(cmd_dict):
    print("Discovering tasks...")

    discovered_tasks = []
    for task in cmd_dict["tasks"]:
        if "nmap" in task:
            #discovered_tasks = append_task(discovered_tasks,task)
            pass
            
        if "metasploit" in task:
            pass
            #discovered_tasks = append_task(discovered_tasks,task)
    
    #return discovered_tasks
def check_for_flags(cmd_dict):    
    pass
#######################DEPRECATED################################